#!/usr/bin/python3.8
# -*- coding: utf-8 -*-

import asyncio

import aiogram
from telebot.types import Message

import config
import data_process
import instruments
import organizer

bot = aiogram.Bot(config.TOKEN)
dp = aiogram.Dispatcher(bot)

state = None
state_time = {}


def user_init(message: Message):  # –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç id
    while True:
        data = data_process.load_information()
        user_id = str(message.from_user.id)
        if user_id not in data:
            data_process.update_information(user_id, [])
        break


@dp.message_handler(commands=['start'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'start'
async def start_message(message):
    user_init(message)
    await bot.send_message(message.chat.id,
                           f"–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>!üëã\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–æ–º–Ω–∏—Ç —Ç–µ–±–µ –æ —Ç–≤–æ–∏—Ö –¥–µ–ª–∞—Ö.\n"
                           f"–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã!", parse_mode='html')


@dp.message_handler(commands=['create_task'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'create_task'
async def create_task(message):
    await bot.send_message(message.chat.id,
                           "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    global state
    state = 'create_task_1'


@dp.message_handler(commands=['remove_task'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'remove_task'
async def remove_task(message):
    await show_tasks(message)
    await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "/—É–¥–∞–ª–∏_–¥–µ–ª–æ 2"')
    global state
    state = 'remove_task'


@dp.message_handler(commands=['show_tasks'])  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'show_tasks'
async def show_tasks(message):
    user_id = message.from_user.id
    current_org = organizer.Organizer(user_id)
    text = current_org.show_tasks()
    await bot.send_message(message.chat.id, text)


@dp.message_handler(content_types=['text'])  # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–µ–ª–∞
async def remove_task(message):
    user_id = message.from_user.id
    current_org = organizer.Organizer(user_id)
    global state
    global state_time
    if state == 'create_task_1':
        state_time[user_id] = message.text
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–±—ã—Ç–∏–µ')
        state = 'create_task_2'
    elif state == 'create_task_2':
        description = message.text
        current_org.create_task(state_time[user_id], description)
        await bot.send_message(message.chat.id, '–Ø —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –¥–µ–ª–æ –≤ —Å–ø–∏—Å–æ–∫')
        await run_task(message, state_time[user_id], description)
    elif state == 'remove_task':
        time_index = message.text
        current_org.remove_task(int(time_index))
        await bot.send_message(message.chat.id, '–Ø —É–¥–∞–ª–∏–ª –¥–µ–ª–æ')
        state = None


async def run_task(message, time, description):
    try:
        sec_left = instruments.get_sec_left(time)
    except TypeError:
        await bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.')
        return
    await asyncio.sleep(sec_left)
    await bot.send_message(message.chat.id, '–ù–∞–ø–æ–º–∏–Ω–∞—é!\n' + description)


if __name__ == '__main__':
    aiogram.executor.start_polling(dp)
